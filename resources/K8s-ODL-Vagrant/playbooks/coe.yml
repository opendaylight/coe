---

- hosts: coe-all
  vars:
    openvswitch_version: 2.8.2
    openvswitch_checksum: sha256:87b4a7e7134a44ce1f808d3415a2244b4518c2b0b2a42fa2f8231e592f13103d
    kubernetes_version: 1.9.4
    openvswitch_package_cache: /vagrant/cache/ovs
    golang_package_cache: /vagrant/cache/golang
    golang_version: 1.11.5
    golang_checksum: sha256:ff54aafedff961eb94792487e827515da683d61a5f9482f668008832631e5d25

  roles:
    - fkautz.bridge-utils-install
    - fkautz.openvswitch-install
    - lfit.docker-install
    - fkautz.kubernetes-install
    - fkautz.golang-install

- hosts: coe-all
  tasks:
    - name: Download vagrant private key
      get_url:
        url: https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant
        dest: /home/vagrant/.ssh/id_rsa
        mode: 0600
      creates: /home/vagrant/.ssh/id_rsa
    - name: Download vagrant public key
      get_url:
        url: https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub
        dest: /home/vagrant/.ssh/id_rsa.pub
        mode: 0600
      creates: /home/vagrant/.ssh/id_rsa.pub


- hosts: coe-examples
  tasks:
    - name: Make example directory
      file:
        path: /home/vagrant/examples
        state: directory
    - name: Copy example files to example directory
      synchronize:
        src: ../provisioning/examples/
        dest: /home/vagrant/examples/

- hosts: coe-configure
  vars:
    gopath: "{{ ansible_env.HOME }}/go"
    coe_dir: "{{ gopath }}/src/git.opendaylight.org/gerrit/p"
    coe_path: "{{ coe_dir }}/coe.git"
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin:{{ ansible_env.HOME }}/go/bin:/usr/local/go/bin"
    GOPATH: "{{ gopath }}"
    GOROOT: /usr/local/go
  tasks:
    - name: 
      file:
        path: "{{ coe_dir }}"
        state: directory
    - name: Copy COE to go path
      file:
        path: "{{ coe_path }}"
        src: "/home/vagrant/coe.git"
        state: link
        force: yes
    - name: Make CNI config directory
      file:
        path: /etc/cni/net.d
        state: directory
      become: true
    - name: Generate cni config
      template:
        src: templates/odlovs-cni.conf.j2
        dest: /etc/cni/net.d/odlovs-cni.conf
      become: true
    - name: Fetch COE git repository
      git:
        repo: 'https://git.opendaylight.org/gerrit/p/coe.git'
        dest: "{{ coe_path }}"
    - name: Build odlovs-cni
      shell: GO111MODULE=on go build
      args:
        chdir: "{{ coe_path }}/odlCNIPlugin/odlovs-cni"
        creates: "{{ coe_path }}/odlCNIPlugin/odlovs-cni/odlovs-cni"
    - name: Install odlovs-cni
      copy:
        src: "{{ coe_path }}/odlCNIPlugin/odlovs-cni/odlovs-cni"
        dest: "/opt/cni/bin/odlovs-cni"
        remote_src: true
        mode: 0755
      become: true

- hosts: coe-configure-watcher
  vars:
    gopath: "{{ ansible_env.HOME}}/go"
    coe_path: "{{ gopath }}/src/git.opendaylight.org/gerrit/p/coe.git"
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin:{{ ansible_env.HOME }}/go/bin:/usr/local/go/bin:{{ gopath }}/bin"
    GOPATH: "{{ gopath }}"
    GOROOT: /usr/local/go
  tasks:
    - name: Build watcher
      shell: go build
      args:
        chdir: "{{ coe_path }}/watcher"
        creates: "{{ coe_path }}/watcher/watcher"
    - name: Copy watcher to /usr/local/bin
      copy:
        src: "{{ coe_path }}/watcher/watcher"
        dest: /usr/local/bin/watcher
        mode: 0755
        remote_src: true
      become: true

- hosts: coe-odl
  vars:
    odl_version: 0.9.0
  tasks:
    - include_tasks: '{{ ansible_distribution }}-java.yml'
    - include_tasks: '{{ ansible_distribution }}-sshpass.yml'
    - name: Create odl directory
      file:
        path: "{{ ansible_env.HOME }}/odl"
        state: directory
    - name: Download ODL
      get_url:
        url: "https://nexus.opendaylight.org/service/local/artifact/maven/content?r=opendaylight.snapshot&g=org.opendaylight.integration&a=karaf&e=tar.gz&v={{ odl_version }}-SNAPSHOT"
        dest: "{{ ansible_env.HOME }}/karaf-{{ odl_version }}-SNAPSHOT.tar.gz"
        mode: 0600
      creates: "{{ ansible_env.HOME }}/karaf-{{ odl_version }}-SNAPSHOT.tar.gz"
    - name: Extract ODL
      unarchive:
        src: "{{ ansible_env.HOME }}/karaf-{{ odl_version }}-SNAPSHOT.tar.gz"
        dest: "{{ ansible_env.HOME }}/odl"
        creates: "{{ ansible_env.HOME }}/odl/karaf-{{ odl_version }}-SNAPSHOT"
    - name: Check if ODL is running
      wait_for:
        port: 8101
        delay: 0
        timeout: 0
        msg: "ODL is not running"
      register: odl_running
      ignore_errors: true
    - name: Start ODL
      shell: nohup ./bin/karaf daemon &
      args:
        chdir: "{{ ansible_env.HOME }}/odl/karaf-{{ odl_version}}-SNAPSHOT"
      when: odl_running.failed == true
    - name: Wait for ODL to start
      wait_for:
        port: 8101
        delay: 2
        timeout: 50
        msg: "ODL did not start"
      when: odl_running.failed == true
    - name: Run COE
      shell: sshpass -p karaf ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null karaf@localhost -p 8101 feature:install odl-netvirt-coe
      when: odl_running.failed == true
      ignore_errors: true

- hosts: coe-configure
  tasks:
    - name: Set OVS Manager
      shell: ovs-vsctl set-manager tcp:{{ manager_ip }}:{{ manager_port }} && touch /tmp/ovs-set-manager
      args:
        creates: /tmp/ovs-set-manager
      become: true
    - name: Enable auto-tunnelling
      shell: ovs-vsctl set O . other_config:local_ip={{ overlay_ip }} && touch /tmp/enable-auto-tunnel
      args:
        creates: /tmp/enable-auto-tunnel
      become: true
    - name: Enable docker in systemd
      systemd:
        name: docker
        daemon_reload: true
        enabled: true
        state: started
      become: true


- hosts: coe-run-master
  tasks:
    - name: Disable swapfile
      shell: swapoff -a
      become: true
    - name: Run kubeadm init
      shell: kubeadm init --apiserver-advertise-address={{ k8s_advertise_address }} > /tmp/k8s-output
      args:
        creates: /tmp/k8s-output
      become: true
    - name: Create join script
      shell: echo "#!/bin/sh" > /tmp/join-k8s.sh && cat /tmp/k8s-output | grep "kubeadm join" | sed -e 's/^[[:space:]]*//g' >> /tmp/join-k8s.sh
      args:
        creates: /tmp/join-k8s.sh
    - name: Fetch join script
      fetch:
        src: /tmp/join-k8s.sh
        dest: ../tmp/join-k8s.sh
        flat: true
    - name: Make kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
    - name: Copy kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: true
      become: true

- hosts: coe-run-watcher
  tasks:
    - name: Run watcher
      shell: nohup watcher odl </dev/null >/tmp/watcher.out 2>&1 &
      args:
        creates: /tmp/watcher.out

- hosts: coe-run-minions
  tasks:
    - name: copy join file
      shell: rsync -avze "ssh -o StrictHostKeyChecking=no" 192.168.33.11:/tmp/join-k8s.sh /tmp/join-k8s.sh

- hosts: coe-run-minions
  tasks:
    - name: Disable swapfile
      shell: swapoff -a
      become: true
    - name: Copy join file
      copy:
        src: ../tmp/join-k8s.sh
        dest: /tmp/join-k8s.sh
        mode: 0700
      become: true
    - name: Join cluster
      shell: /tmp/join-k8s.sh
      become: true
