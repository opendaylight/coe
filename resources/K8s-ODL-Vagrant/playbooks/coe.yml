---

- hosts: coe-all
  vars:
    openvswitch_version: 2.8.2
    openvswitch_checksum: sha256:87b4a7e7134a44ce1f808d3415a2244b4518c2b0b2a42fa2f8231e592f13103d
    kubernetes_version: 1.9.4
    openvswitch_package_cache: /vagrant/cache/ovs
    golang_package_cache: /vagrant/cache/golang
    golang_version: 1.11.5
    golang_checksum: sha256:ff54aafedff961eb94792487e827515da683d61a5f9482f668008832631e5d25

  roles:
    - fkautz.bridge-utils-install
    - fkautz.openvswitch-install
    - fkautz.docker-install
    - fkautz.kubernetes-install
    - fkautz.golang-install

- hosts: coe-all
  tasks:
    - name: Download vagrant private key
      get_url:
        url: https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant
        dest: /home/vagrant/.ssh/id_rsa
        mode: 0600
    - name: Download vagrant public key
      get_url:
        url: https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub
        dest: /home/vagrant/.ssh/id_rsa.pub
        mode: 0600


- hosts: coe-examples
  tasks:
    - name: Make example directory
      file:
        path: /home/vagrant/examples
        state: directory
    - name: Copy example files to example directory
      synchronize:
        src: ../provisioning/examples/
        dest: /home/vagrant/examples/

- hosts: coe-configure
  vars:
    gopath: "{{ ansible_env.HOME }}/go"
    coe_dir: "{{ gopath }}/src/git.opendaylight.org/gerrit/p"
    coe_path: "{{ coe_dir }}/coe.git"
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin:{{ ansible_env.HOME }}/go/bin:/usr/local/go/bin"
    GOPATH: "{{ gopath }}"
    GOROOT: /usr/local/go
  tasks:
    - name: 
      file:
        path: "{{ coe_dir }}"
        state: directory
    - name: Copy COE to go path
      file:
        path: "{{ coe_path }}"
        src: "/home/vagrant/coe.git"
        state: link
        force: yes
    - name: Make CNI config directory
      file:
        path: /etc/cni/net.d
        state: directory
      become: true
    - name: Generate cni config
      template:
        src: templates/odlovs-cni.conf.j2
        dest: /etc/cni/net.d/odlovs-cni.conf
      become: true
    - name: Build odlovs-cni
      shell: GO111MODULE=on go build
      args:
        chdir: "{{ coe_path }}/odlCNIPlugin/odlovs-cni"
        creates: "{{ coe_path }}/odlCNIPlugin/odlovs-cni/odlovs-cni"
    - name: Install odlovs-cni
      copy:
        src: "{{ coe_path }}/odlCNIPlugin/odlovs-cni/odlovs-cni"
        dest: "/opt/cni/bin/odlovs-cni"
        remote_src: true
        mode: 0755
      become: true

- hosts: coe-configure
  tasks:
    - name: Enable docker in systemd
      systemd:
        name: docker
        daemon_reload: true
        enabled: true
        state: started
      become: true

- hosts: coe-configure-watcher
  vars:
    gopath: "{{ ansible_env.HOME}}/go"
    coe_path: "{{ gopath }}/src/git.opendaylight.org/gerrit/p/coe.git"
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin:{{ ansible_env.HOME }}/go/bin:/usr/local/go/bin:{{ gopath }}/bin"
    GOPATH: "{{ gopath }}"
    GOROOT: /usr/local/go
  tasks:
    - name: Build watcher
      shell: "docker build -t odlwatcher ."
      args:
        chdir: "{{ coe_path }}/watcher"
      become: true

- hosts: coe-odl
  vars:
    odl_version: 0.10.0
  tasks:
    - include_tasks: '{{ ansible_distribution }}-java.yml'
    - include_tasks: '{{ ansible_distribution }}-sshpass.yml'
    - name: Create odl directory
      file:
        path: "{{ ansible_env.HOME }}/odl"
        state: directory
    - name: Download ODL
      get_url:
        url: "https://nexus.opendaylight.org/service/local/artifact/maven/content?r=opendaylight.snapshot&g=org.opendaylight.integration&a=karaf&e=tar.gz&v={{ odl_version }}-SNAPSHOT"
        dest: "{{ ansible_env.HOME }}/karaf-{{ odl_version }}-SNAPSHOT.tar.gz"
        mode: 0600
    - name: Extract ODL
      unarchive:
        src: "{{ ansible_env.HOME }}/karaf-{{ odl_version }}-SNAPSHOT.tar.gz"
        dest: "{{ ansible_env.HOME }}/odl"
        creates: "{{ ansible_env.HOME }}/odl/karaf-{{ odl_version }}-SNAPSHOT"
    - name: Check if ODL is running
      wait_for:
        port: 8101
        delay: 0
        timeout: 0
        msg: "ODL is not running"
      register: odl_running
      ignore_errors: true
    - name: Start ODL
      shell: nohup ./bin/karaf daemon &
      args:
        chdir: "{{ ansible_env.HOME }}/odl/karaf-{{ odl_version}}-SNAPSHOT"
      when: odl_running.failed == true
    - name: Wait for ODL to start
      wait_for:
        port: 8101
        delay: 2
        timeout: 50
        msg: "ODL did not start"
      when: odl_running.failed == true
    - name: Run COE
      shell: sshpass -p karaf ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null karaf@localhost -p 8101 feature:install odl-netvirt-coe
      when: odl_running.failed == true
      ignore_errors: true

- hosts: coe-configure
  tasks:
    - name: Set OVS Manager
      shell: ovs-vsctl set-manager tcp:{{ manager_ip }}:{{ manager_port }} && touch /tmp/ovs-set-manager
      args:
        creates: /tmp/ovs-set-manager
      become: true
    - name: Enable auto-tunnelling
      shell: ovs-vsctl set O . other_config:local_ip={{ overlay_ip }} && touch /tmp/enable-auto-tunnel
      args:
        creates: /tmp/enable-auto-tunnel
      become: true


- hosts: coe-run-master
  tasks:
    - name: Disable swapfile
      shell: swapoff -a
      become: true
    - name: Run kubeadm init
      shell: kubeadm init --ignore-preflight-errors=SystemVerification --apiserver-advertise-address={{ k8s_advertise_address }} > /tmp/k8s-output
      args:
        creates: /tmp/k8s-output
      become: true
    - name: Create join script
      shell: echo "#!/bin/sh" > /tmp/join-k8s.sh && cat /tmp/k8s-output | grep "kubeadm join" | sed -e 's/^[[:space:]]*//g' | sed -e 's/kubeadm join/kubeadm join --ignore-preflight-errors=SystemVerification/' >> /tmp/join-k8s.sh
      args:
        creates: /tmp/join-k8s.sh
    - name: Fetch join script
      fetch:
        src: /tmp/join-k8s.sh
        dest: ../tmp/join-k8s.sh
        flat: true
    - name: Make kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
    - name: Copy kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: true
      become: true

- hosts: coe-run-watcher
  vars:
    gopath: "{{ ansible_env.HOME}}/go"
    coe_path: "{{ gopath }}/src/git.opendaylight.org/gerrit/p/coe.git"
  tasks:
    - name: Run watcher
      shell: "kubectl apply -f {{ coe_path }}/watcher/odlwatcher-ds.yaml"
      args:
        creates: /tmp/watcher.out



- hosts: coe-run-minions
  tasks:
    - name: copy join file
      shell: rsync -avze "ssh -o StrictHostKeyChecking=no" 192.168.33.11:/tmp/join-k8s.sh /tmp/join-k8s.sh

- hosts: coe-run-minions
  tasks:
    - name: Disable swapfile
      shell: swapoff -a
      become: true
    - name: Copy join file
      copy:
        src: ../tmp/join-k8s.sh
        dest: /tmp/join-k8s.sh
        mode: 0700
      become: true
    - name: Join cluster
      shell: /tmp/join-k8s.sh && touch /tmp/k8s-joined
      become: true
      args:
        creates: /tmp/k8s-joined

# - hosts: coe-run-master
#   tasks:
#     - name: untaint master
#       shell: "kubectl taint nodes --all node-role.kubernetes.io/master-"

- hosts: coe-configure
  vars:
    gopath: "{{ ansible_env.HOME}}/go"
    coe_path: "{{ gopath }}/src/git.opendaylight.org/gerrit/p/coe.git"
    watcher_path: "{{ coe_path }}/watcher"
  tasks:
    # - name: Wait for bridge
    #   shell: "./wait-for-bridge.sh"
    #   args:
    #     chdir: "{{ watcher_path }}"
    #   register: services_ip_address_cmd
    # - name: Set services_ip_address variable
    #   set_fact:
    #     services_ip_address="{{ services_ip_address_cmd.stdout_lines[0] }}"
    - name: Get hostname
      shell: "hostname"
      register: node_hostname_cmd
    - name: Set hostname variable
      set_fact:
        node_hostname="{{node_hostname_cmd.stdout_lines[0]}}"
    - name: Generate UID
      shell: "echo {{ node_hostname }} | sha256sum | awk '{print $1}' | xargs ./generate-uid.sh"
      args:
        chdir: "{{ watcher_path }}"
      register: node_uid_cmd
    - name: Set UID variable
      set_fact:
        node_uid={{node_uid_cmd.stdout_lines[0]}}
        veth_interface_id={{node_uid_cmd.stdout_lines[1]}}
    - name: Generate pod request
      template:
        src: templates/odl-pod.json.j2
        dest: /tmp/odl-pod.json
    - name: PUT to ODL
      shell: "curl -v -X PUT -u admin:admin -H \"Content-Type: application/json\" -d @/tmp/odl-pod.json http://192.168.33.11:8181/restconf/config/pod:coe/pods/{{node_uid}} && touch /tmp/odl-pod-sent"
      args:
        creates: "/tmp/odl-pod-sent"
    - name: Create OVS port
      shell: "ovs-vsctl add-port br-int veth{{ veth_interface_id }} -- set Interface veth{{ veth_interface_id }} type=internal && touch /tmp/ovs-port-added"
      become: true
      args:
        creates: "/tmp/ovs-port-added"
    - name: Get interface mac address
      shell: "ifconfig veth{{ veth_interface_id }} | grep ether | awk '{print $2}'"
      register: mac_address_cmd
    - name: Register mac address variable
      set_fact:
        mac_address: "{{mac_address_cmd.stdout_lines[0]}}"
    - name: Configure veth port
      shell: "ovs-vsctl set Interface veth{{ veth_interface_id }} external-ids:iface-id='00000000-0000-0000-0000-000000000001:{{ node_hostname }}-services' external-ids:attached-mac=\"{{ mac_address }}\" external-ids:is-service-gateway=true && touch /tmp/ovs-interface-configured"
      args:
        creates: /tmp/ovs-interface-configured
      become: true
    #- name: Delete br-int route
    #  shell: "ip route del $(ip route | grep br-int) && touch /tmp/br-int-routes-disabled"
    #  become: true
    #  args:
    #    creates: /tmp/br-int-routes-disabled
    - name: "Disable br-int linux interface"
      shell: "ip link set br-int down"
      become: true
    - name: Set veth ip
      shell: "ip addr add {{ services_ip_address }}/24 dev veth{{ veth_interface_id }} && touch /tmp/set-veth-ip"
      become: true
      args:
        creates: /tmp/set-veth-ip
    - name: Set veth state up
      shell: "ip link set dev veth{{ veth_interface_id }} up && touch /tmp/set-veth-up"
      become: true
      args:
        creates: /tmp/set-veth-up
    - name: Add services route
      shell: "ip route add 10.96.0.0/12 via {{ services_ip_address }} && touch /tmp/set-service-route"
      become: true
      args:
        creates: /tmp/set-service-route
    - name: Generate cni config
      template:
        src: templates/odlovs-cni2.conf.j2
        dest: /etc/cni/net.d/odlovs-cni.conf
      become: true
    - name: Add default ovs flow
      shell: "ovs-ofctl -OOpenflow13 add-flow br-int table=21,priority=0,actions=resubmit\\(,17\\) && touch /tmp/ovs-default-flow-created"
      become: true
      args:
        creates: /tmp/ovs-default-flow-created
    - name: Add ip route
      shell: "ip route add 10.11.0.0/16 via {{ gateway }} && touch /tmp/pod-network-gateway-created"
      become: true
      args:
        creates: /tmp/pod-network-gateway-created
    # - name: Inject NAT rules
    #   shell: "./routes.sh veth{{ veth_interface_id }} enp0s3"
    #   args:
    #     chdir: "{{ watcher_path }}"
    #   becomes: true
